'use client';
import { createContext, useContext, useEffect, useState } from 'react';

const AuthContext = createContext();

export function AuthProvider({ children }) {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  // ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ Î°úÎìú - Îçî Í∞ÑÎã®ÌïòÍ≤å
  const loadUser = async () => {
    console.log('üîÑ AuthContext: Starting loadUser...');
    try {
      const response = await fetch('/api/user/profile', {
        method: 'GET',
        credentials: 'include', // Ïø†ÌÇ§ Ìè¨Ìï®
        headers: {
          'Cache-Control': 'no-cache',
        },
      });
      
      console.log('üì° AuthContext: Profile API response status:', response.status);
      
      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ AuthContext: User data loaded:', data.user);
        setUser(data.user);
      } else {
        console.log('‚ùå AuthContext: Profile API failed, setting user to null');
        setUser(null);
      }
    } catch (error) {
      console.error('üí• AuthContext: User loading error:', error);
      setUser(null);
    } finally {
      console.log('üèÅ AuthContext: Setting loading to false');
      setLoading(false);
    }
  };

  // Login - Îçî Í∞ÑÎã®ÌïòÍ≤å
  const login = async (email, password) => {
    console.log('üîê AuthContext: Starting login for email:', email);
    try {
      const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, password }),
        credentials: 'include', // Ïø†ÌÇ§ Ìè¨Ìï®
      });

      console.log('üì° AuthContext: Login API response status:', response.status);
      const data = await response.json();
      console.log('üìä AuthContext: Login API response data:', data);

      if (response.ok) {
        console.log('‚úÖ AuthContext: Login successful, setting user:', data.user);
        setUser(data.user);
        return { success: true, message: data.message, user: data.user };
      } else {
        console.log('‚ùå AuthContext: Login failed:', data.error);
        return { success: false, error: data.error };
      }
    } catch (error) {
      console.error('üí• AuthContext: Login error:', error);
      return { success: false, error: 'A network error occurred' };
    }
  };

  // Register
  const register = async (userData) => {
    try {
      const response = await fetch('/api/auth/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(userData),
        credentials: 'include',
      });

      const data = await response.json();

      if (response.ok) {
        return { success: true, message: data.message };
      } else {
        return { success: false, error: data.error };
      }
    } catch (error) {
      console.error('Registration error:', error);
      return { success: false, error: 'A network error occurred' };
    }
  };

  // Logout
  const logout = async () => {
    console.log('üö™ AuthContext: Starting logout...');
    try {
      await fetch('/api/auth/logout', { 
        method: 'POST',
        credentials: 'include'
      });
      setUser(null);
      console.log('‚úÖ AuthContext: Logout completed');
    } catch (error) {
      console.error('üí• AuthContext: Logout error:', error);
    }
  };

  // Update SNS settings
  const updateSnsSettings = async (snsSettings) => {
    try {
      const response = await fetch('/api/user/profile', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ snsSettings }),
        credentials: 'include',
      });

      const data = await response.json();

      if (response.ok) {
        setUser(data.user);
        return { success: true, message: data.message };
      } else {
        return { success: false, error: data.error };
      }
    } catch (error) {
      console.error('SNS settings update error:', error);
      return { success: false, error: 'A network error occurred' };
    }
  };

  // Ï¥àÍ∏∞ Î°úÎìú
  useEffect(() => {
    console.log('üöÄ AuthContext: Component mounted, loading user...');
    loadUser();
  }, []);

  // ÏÇ¨Ïö©Ïûê ÏÉÅÌÉú Î≥ÄÍ≤Ω Ïãú Î°úÍ∑∏
  useEffect(() => {
    console.log('üë§ AuthContext: User state changed:', user ? `${user.email} (${user.id})` : 'null');
  }, [user]);

  // Î°úÎî© ÏÉÅÌÉú Î≥ÄÍ≤Ω Ïãú Î°úÍ∑∏
  useEffect(() => {
    console.log('‚è≥ AuthContext: Loading state changed:', loading);
  }, [loading]);

  const value = {
    user,
    loading,
    login,
    register,
    logout,
    updateSnsSettings,
    loadUser
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}