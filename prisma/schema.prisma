// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  company   String?
  phone     String
  role      Role     @default(CLIENT)
  googleId  String?  @unique
  resetToken String?
  resetTokenExpiry DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders       Order[]
  adminOrders  Order[] @relation("AdminOrders")
  feedbacks    Feedback[]
  snsSettings  SnsSettings?
  aiGenerations AIGeneration[] @relation("AIGenerations")
  payments     Payment[]

  @@map("users")
  @@index([email])
  @@index([role])
}

model Order {
  id          String      @id @default(cuid())
  orderId     String      @unique
  title       String
  description String
  status      OrderStatus @default(PENDING)
  priority    Priority    @default(NORMAL)
  dueDate     DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Foreign Keys
  clientId String
  adminId  String?

  // Relations
  client       User         @relation(fields: [clientId], references: [id])
  admin        User?        @relation("AdminOrders", fields: [adminId], references: [id])
  files        File[]
  adminContent AdminContent?
  feedbacks    Feedback[]
  snsPosting   SnsPosting?
  aiGenerations AIGeneration[]

  @@map("orders")
  @@index([clientId])
  @@index([status])
  @@index([createdAt])
}

model File {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimetype     String
  size         Int
  path         String
  uploadedAt   DateTime @default(now())

  // Foreign Keys
  orderId        String?
  adminContentId String?

  // Relations
  order        Order?        @relation(fields: [orderId], references: [id])
  adminContent AdminContent? @relation(fields: [adminContentId], references: [id])

  @@map("files")
}

model AdminContent {
  id          String    @id @default(cuid())
  description String?
  completedAt DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Foreign Keys
  orderId String @unique

  // Relations
  order Order  @relation(fields: [orderId], references: [id])
  files File[]

  @@map("admin_contents")
}

model Feedback {
  id        String       @id @default(cuid())
  type      FeedbackType
  message   String?
  createdAt DateTime     @default(now())

  // Foreign Keys
  orderId String
  userId  String

  // Relations
  order Order @relation(fields: [orderId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@map("feedbacks")
}

model SnsSettings {
  id        String   @id @default(cuid())
  platforms String   @default("[]")
  settings  String   @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign Keys
  userId String @unique

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("sns_settings")
}

model SnsPosting {
  id          String   @id @default(cuid())
  autoPost    Boolean  @default(false)
  scheduledAt DateTime?
  platforms   String   @default("")
  posts       String   @default("[]")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign Keys
  orderId String @unique

  // Relations
  order Order @relation(fields: [orderId], references: [id])

  @@map("sns_postings")
}

model GalleryItem {
  id          String   @id @default(cuid())
  title       String
  description String?
  filename    String
  originalName String
  mimetype    String
  size        Int
  path        String
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("gallery_items")
}

model MainBanner {
  id          String   @id @default(cuid())
  title       String?
  description String?
  filename    String
  originalName String
  mimetype    String
  size        Int
  path        String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("main_banners")
}

model AIGeneration {
  id             String    @id @default(cuid())
  prompt         String
  negativePrompt String    @default("")
  promptId       String    // ComfyUI prompt ID
  clientId       String    // ComfyUI client ID
  status         String    @default("processing") // processing, completed, failed
  parameters     String    @default("{}") // JSON string of generation parameters
  resultImages   String    @default("[]") // JSON array of generated image URLs
  createdAt      DateTime  @default(now())
  completedAt    DateTime?
  
  // Foreign Keys
  orderId   String
  createdBy String

  // Relations
  order   Order @relation(fields: [orderId], references: [id])
  creator User  @relation("AIGenerations", fields: [createdBy], references: [id])

  @@map("ai_generations")
}

model Payment {
  id              String        @id @default(cuid())
  amount          Float         // Payment amount in USD
  currency        String        @default("usd")
  status          PaymentStatus @default(PENDING)
  
  // Service Information
  serviceType     ServiceType   // PLAN or OTHER_SERVICE
  serviceName     String        // Name of the service/plan
  serviceDetails  String?       // Additional service details (JSON)
  
  // Stripe Information
  stripeSessionId String?       // Stripe checkout session ID
  stripePaymentId String?       // Stripe payment intent ID
  
  // Metadata
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  paidAt          DateTime?
  
  // Foreign Keys
  userId          String
  
  // Relations
  user            User          @relation(fields: [userId], references: [id])
  
  @@map("payments")
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

enum Role {
  CLIENT
  ADMIN
}

enum OrderStatus {
  PENDING     // 대기중
  IN_PROGRESS // 진행중
  REVIEW      // 검토대기
  REVISION    // 수정요청
  COMPLETED   // 완료
  CANCELLED   // 취소
}

enum Priority {
  NORMAL // 일반
  URGENT // 급함
  CRITICAL // 매우급함
}

enum FeedbackType {
  APPROVAL // 승인
  REVISION // 수정요청
}

enum PaymentStatus {
  PENDING   // 결제 대기
  PROCESSING // 처리중
  COMPLETED // 결제 완료
  FAILED    // 결제 실패
  CANCELLED // 취소
  REFUNDED  // 환불
}

enum ServiceType {
  PLAN          // Service Plan (Starter, Growth, Pro)
  OTHER_SERVICE // Other Services (Menu Design, Photography, etc.)
}
